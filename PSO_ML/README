                            ################# General information about the code #################

The PSO_ML code allows to optimize the FFs parameter of a CGMD simulation with respect of the slurry characteristics (in terms of both density and viscosity) of a NMC-based cathode slurry combining a PSO algorithm together with a ML (DNN) code. For any detail about the latter the interest readers are referred to the scientifc article titled "Accelerated Optimization Methods for Force-Field Parametrization in Battery Electrode Manufacturing Modeling" by Teo Lombardo, Jean-Baptiste Hoock, Emiliano N. Primo, Alain C. Ngandjong, Marc Duquesnoy and Alejandro A. Franco, published in April 2020 by Batteris & Supercaps (Wiley), DOI: 10.1002/batt.202000049.

This code has been developed to take into account the slurry density and the viscosity at two different shear-rates. 
The values of the latter can be modified by modifying the files "viscosityShearRate1.run.meta" and "viscosityShearRate2.run.meta" after the comment "Shear-rate". The input files provided here are setted for the shear-rates of 18 and 125 (s-1), whose are the values used for the afromentioned work.

The parameters optimize in this code refer to the use of an hybrid FF relying on both Lennard-Jones FF and Granular-Hertzian FF. The parameters to optimize can be modified, if needed, by moving the associate @Pi@ label in the input file ("inliqreal.run.meta", "viscosityShearRate1.run.meta" and "viscosityShearRate2.run.meta"). Their associated maximal and minimal values can be modulated as well by the text input "paramlrcs.txt". 
Consequently, this code can be easily adapted to other FFs or to approach using the same FFs but interested in optimizing different parameters.
On the other hand, if more than 8 parameters need to be optimized the C++ code (pso_ml.cpp) should be modified accordingly. 

Two DNN algorithm provided here are based on the SkLearn and Keras python library, respectively. The use of one code instead of the other can be modulated by the file "scriptml.sh".
 
The CGMD/NE-CGMD simulation uses LAMMPS computational software(https://lammps.sandia.gov/). Therefore, this opens source software should be installed as first before to used the PSO_ML code. 

This first version of the code (v0.0.0) will be improved as soon as possible with the final aim of improving the readibility and adaptability of the PSO_ML code. Indeed, this code has been developed to be launched on a specific calculator (Matrics, Universit√© de Picardie Jules Verne) and using the nodes specific to the ARTISTIC project (https://www.u-picardie.fr/erc-artistic/?L=0). Therefore, the code and the scripts to launch the CGMD/NE-CGMD simulations should be modified in order to correctly launch the code in different calculators/nodes. The next versions of this code will try to ease the needed modifications of the code in order to simplify the use of the latter for different nodes and calculator respect the ones used in the afromentioned work.

For any problem or question please contact the following: jean-baptiste.hoock@u-picardie.fr, teo.lombardo@u-picardie.fr, teo.lombardo3@gmail.com, alain.ngandjong@u-picardie.fr, alejandro.franco@u-picardie.fr


                            ################# How to launch the code #################

1) Adapt the code and the script for the calculator and nodes that will be used for the CGMD/NE-CGMD simulations;
2) If needed, modify the parameters who need to be optimized by moving the associate @Pi@ label in the input files ("inliqreal.run.meta", "viscosityShearRate1.run.meta" and "viscosityShearRate2.run.meta"). Their associated maximal and minimal values can be modulated as well by the text input "paramlrcs.txt". If more than 8 parameters need to be optimized the C++ code (pso_ml.cpp) should be modified accordingly;
3) Select the shear-rates of interest by modifying the variable following the comment "Shear-rate" in the input files "viscosityShearRate1.run.meta" and "viscosityShearRate2.run.meta";
4) Select the experimental density and viscosity (at the shear-rate selected) at the beginning of the pso_ml.cpp file by definying "DENSITY_EXP", "VISCOSITY1_EXP" (for the shear-rate associated to the file viscosityShearRate1.run.meta) and "VISCOSITY2_EXP" (for the shera-rate associated to the file viscosityShearRate2.run.meta);
5) Modify the path and the name of the dataset used in the DNN code;
6) Create a screen;
7) Compile the code through the command "./compile.sh";
8) Launch the code through the command "psoml".


                                   ################# Outputs #################

The code will outputs a file named "results.csv" which will report the FFs parameters values used for each particle for all the iterations performed. Associated to these values the final temperature obtained at the end of the slurry simulation (to check that the system reached the temperature desired) together with the slurry density (through CGMD simulation) and viscosity (and their standard deviation) at the shear-rates selected (through NE-CGMD) for each set of parameter tested is reported as well. Lastly the associated value of the cost function (indication how close or how far this set of parameters is respect the experimental condition chosen) for each set of parameter together to the global best (the minimal cost function) obtained up to the i-th iteration is reported.
The code also outputs a file to track the codes while running in order to ease the detection of errors named a_analyser.txt.
